#include <iostream>
#include <set>
#include <string>
#include <vector>
#include <map>


using namespace std;

// СЧИТЫВАЕТ ВВОД В ПОИСКУОВУЮ СТРОКУ
string ReadLine() {
    string s;
    getline(cin, s);
    return s;
}

// СЧИТЫВАЕТ ВВОД КОЛИЧЕСТВА ДОКУМЕНТОВ
int ReadLineWithNumber() {
    int result = 0;
    cin >> result;
    ReadLine();
    return result;
}

// ПЕРОБРАЗУЕТ СТРОКУ В ВЕКТОР
vector<string> SplitIntoWords(const string& text) {
    vector<string> words;
    string word;
    for (const char c : text) {
        if (c == ' ') {
            if (!word.empty()) {
                words.push_back(word);
                word.clear();
            }
        } else {
            word += c;
        }
    }
    if (!word.empty()) {
        words.push_back(word);
    }

    return words;
}

// ПРЕОБРАЗУЕТ СТРОКУ СТОП-СЛОВ ВО МНОЖЕСТВО
set<string> ParseStopWords(const string& text) {
    set<string> stop_words;
    for (const string& word : SplitIntoWords(text)) {
        stop_words.insert(word);
    }
    return stop_words;
}

// ВОЗВРАЩАЕТ СТРОКУ ВЕКТОРОМ БЕЗ СТОП-СЛОВ
vector<string> SplitIntoWordsNoStop(const string& text, const set<string>& stop_words) {
 vector<string> words;
 // проходим по всем словам из текста и проверяем, что их нет в списке стоп-слов
 for (const string& word : SplitIntoWords(text)) {
 if (stop_words.count(word) == 0) {
 words.push_back(word);
 }
 }
 // вернём результат без стоп-слов
 return words;
}

// ВОЗВРАЩАЕТ СТРОКУ МНОЖЕСТВОМ БЕЗ СТОП-СЛОВ
set<string> ParseQuery(const string& text, const set<string>& stop_words) {
    set<string> query_words;
    for (const string& word : SplitIntoWordsNoStop(text, stop_words)) {
        query_words.insert(word);
    }
    return query_words;
}

// возвращает релевантность документа запросу query_words
int MatchDocument(const pair<int, vector<string>>& document, const set<string>& query_words) {
    int relevance;
    set<string> relevance_word;
    
    for (const auto& word : document.second) {
        if (query_words.count(word) != 0) {
            relevance_word.insert(word);
        }
    }
    
    relevance = relevance_word.size();
    return relevance;
}

// Для каждого найденного документа возвращает его id и релевантность
// Стоп-слова исключаются из поиска
vector<pair<int, int>> FindDocuments(const vector<pair<int, vector<string>>>& documents, const set<string>& stop_words, const string& query) {
    vector<pair<int, int>> matched_documents;
        
    const set<string> query_words = ParseQuery(query, stop_words);
    
    int document_id = 0;
    for (const auto& document : documents) {
        if (MatchDocument(document, query_words) > 0) {
            matched_documents.push_back({document_id, MatchDocument(document, query_words)});
        }
        ++document_id;
    }
    return matched_documents;
}

// БАЗА ДАННЫХ
void AddDocument(const vector<pair<int, vector<string>>>& documents, const set<string>& stop_words,  int document_id, const string& document) {
                 
    pair<int, vector<string>> words;
    words = {document_id, SplitIntoWordsNoStop(document, stop_words)};
    documents.push_back(words);
}


int main() {
    const string stop_words_joined = ReadLine();
    const set<string> stop_words = ParseStopWords(stop_words_joined);

    // Read documents
    vector<pair<int, vector<string>>> documents;
    const int document_count = ReadLineWithNumber();
    for (int document_id = 0; document_id < document_count; ++document_id) {
        AddDocument(documents, stop_words, document_id, ReadLine());
    }

    const string query = ReadLine();
    for (auto [document_id, relevance] : FindDocuments(documents, stop_words, query)) {
        cout << "{ document_id = "s << document_id << ", relevance = "s << relevance << " }"s << endl;
    }
}
